name: "Wails Build Action"
description: "Creates a wails binary"

inputs:
  build:
    description: "Platform to build for"
    required: false
    default: "true"
  build-name:
    description: "The name of the binary file"
    required: true
  build-platform:
    description: "Platform to build for"
    required: false
    default: "darwin/universal"
  wails-version:
    description: "Wails version to use"
    required: false
    default: "latest"
  wails-build-webview2:
    description: "Webview2 installer method [download,embed,browser,error]"
    required: false
    default: "download"
  go-version:
    description: "Version of Go to use"
    required: false
    default: "1.17"
  node-version:
    description: "Node js version"
    required: false
    default: "16.x"

runs:
  using: "composite"
  steps:
    # Setup and configure GoLang
    - name: Setup GoLang
      uses: actions/setup-go@v2
      with:
        go-version: ${{inputs.go-version}}
    - name: Setup Go Cache
      uses: actions/cache@v3
      with:
        path: |
          %LocalAppData%\go-build
          ~\go\pkg\mod
          ~/Library/Caches/go-build
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    # Setup and configure NodeJS
    - name: Setup NodeJS
      uses: actions/setup-node@v2
      with:
        node-version: ${{inputs.node-version}}
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Setup NodeJS cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    # install wails
    - name: Install Wails
      if: inputs.build == 'true'
      run: go install github.com/wailsapp/wails/v2/cmd/wails@${{inputs.wails-version}}
      shell: bash
    - name: Install Linux Wails deps
      if: inputs.build == 'true' && runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libgtk-3-0 libwebkit2gtk-4.0-dev gcc-aarch64-linux-gnu
      shell: bash
    # Building step
    - run: |
        wails generate template -frontend ${{ github.workspace }} -name ${{inputs.build-name}}
        mkdir -p ${{ github.workspace }}/build/native
      shell: bash
    - run: wails init -t ${{inputs.build-name}} -g -d build/native -n ${{inputs.build-name}}
      shell: bash
    - name: Build
      uses: dAppServer/wails-build-action@v2
      with:
        working-directory: ./build/native
        build-name: ${{inputs.build-name}}
        build-platform: linux/amd64
    
